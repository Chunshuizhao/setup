call neomake#configure#automake('nrwi', 500)

set nocp
inoremap jk <ESC>
filetype plugin on
syntax on
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set tw=79
"set foldmethod=syntax
"set foldmethod=indent
map <F2> :retab <CR> :wq! <CR>
let g:netrw_localrmdir="rm -rf"
set nowrap
"set statusline+=%F
" 0: never shows the status bar
" 1: show only if there are more than 2 window
" 2: always show
set laststatus=2
set tags+=~/.vim/tags/cpp
set tags+=./tags
set number
let g:neocomplcache_enable_at_startup = 1
nnoremap <silent> <Leader>df :call DiffToggle()<CR>

function! DiffToggle()
	if &diff
		diffoff
	else
		diffthis
	endif
:endfunction

if executable('ag')
    " Note we extract the column as well as the file and line number
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
endif

set autoindent
set cindent
set hidden
set hlsearch 
augroup filetype
  au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

nmap t% :tabedit %<CR>
nmap td :tabclose<CR>

"color ron 
syntax enable
set background=dark
set modifiable
let mapleader=","
set backspace=indent,eol,start
let g:ConqueTerm_ReadUnfocused = 1
noremap <leader>m :MaximizerToggle<CR>
noremap <leader>l :TagbarToggle<CR>

function! Tab_Or_Complete()
	if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
	return "\<C-N>"
	else
	return "\<Tab>"
	endif
	endfunction
	:inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
	:set dictionary="/usr/dict/words"

nmap ,lcd :lcd %:p:h<CR>

let g:CommandTMaxFiles=500000
let g:CommandTWildIgnore=&wildignore . ",*.o" . ",*.pyc" . ",*.so" . ",*.png" .
            \ ",*.log" . ",*/data/*" . ",*/output/*" . ",*.d" . ",*/models/*" .
            \ ",*/tmp_run/*" . ",*.jpg"

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|tmp_run$\|output$\|assets$\|lib.linux-x86_64-3.5$\|lib.linux-x86_64-3.6$\|temp.linux-x86_64-3.5$\|temp.linux-x86_64-3.6$',
    \ 'file': '\v\.(o|pyc|exe|dll|lib|jpg|png|jpeg|caffemodel|predict)$' }
let g:ctrlp_max_files=0

let g:ConqueGdb_Leader = '\'
let g:ConqueGdb_DeleteBreak = g:ConqueGdb_Leader . 'd'
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
nnoremap <leader>jd :YcmCompleter GoTo<CR>


let g:netrw_sizestyle= "h"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:auto_save = 1  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
let g:auto_save_silent = 1  " do not display the auto-save notification

"set foldmethod=syntax

autocmd FileType cuda set ft=c
let Tlist_Show_One_File = 1

let g:ycm_confirm_extra_conf=0
let g:ctags_statusline=1 

set autoread

set shortmess+=A

let g:neomake_python_enabled_makers = ['pyflakes']
" we use ycm to do the syntax checking and thus, disable the neomake 
let g:neomake_cpp_enabled_makers=[]
let g:neomake_c_enabled_makers=[]


set wildignore+=*/tmp/*,*.so,*.swp,*.zip

augroup my_neomake_signs
    au!
    autocmd ColorScheme *
        \ hi NeomakeErrorSign ctermfg=red |
        \ hi NeomakeWarningSign ctermfg=yellow
augroup END

let g:neomake_error_sign = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
"let g:neomake_error_sign = {
    "\ 'text': 'E>',
    "\ 'texthl': 'NeomakeErrorSign',
    "\ }
let g:neomake_warning_sign = {
    \   'text': '⚠',
    \   'texthl': 'NeomakeWarningSign',
    \ }
"this should be after augroup my_neomake_signs, or that does not work
colorscheme solarized

nmap <Leader>b :CtrlPBuffer<CR>
